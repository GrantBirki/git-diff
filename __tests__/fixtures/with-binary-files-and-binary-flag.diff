diff --git a/custom-endpoints/nightbot.mjs b/custom-endpoints/nightbot.mjs
index 31ed216e290f95bc1243ace7aec82590e7e4f61b..6236a84fbad6551a7a24fa44e6bca057ae58605d 100644
--- a/custom-endpoints/nightbot.mjs
+++ b/custom-endpoints/nightbot.mjs
@@ -1,6 +1,5 @@
 import { v4 as uuidv4 } from 'uuid';
 
-import cacheMachine from '../utils/cache-machine.mjs';
 import graphqlUtil from '../utils/graphql-util.mjs';
 
 const skipCache = false; //ENVIRONMENT !== 'production' || false;
@@ -9,31 +8,21 @@ function capitalize(s) {
     return s && s[0].toUpperCase() + s.slice(1);
 }
 
-export default async function (request, data, ctx) {
-    const requestStart = new Date();
+export default async function (request, data) {
+    if (request.method.toUpperCase() !== 'GET') {
+        return new Response(null, {
+            status: 405,
+            headers: { 'cache-control': 'public, max-age=2592000' },
+        });
+    }
     const requestId = uuidv4();
     const url = new URL(request.url);
 
     if (!url.searchParams.get('q')) {
-        return new Response(`Missing a query param called q`);
-    }
-
-    // Check the cache service for data first - If cached data exists, return it
-    if (!skipCache) {
-        const cachedResponse = await cacheMachine.get(env, 'nightbot', { q: url.searchParams.get('q') });
-        if (cachedResponse) {
-            // Construct a new response with the cached data
-            const newResponse = new Response(cachedResponse);
-            // Add a custom 'X-CACHE: HIT' header so we know the request hit the cache
-            newResponse.headers.append('X-CACHE', 'HIT');
-            console.log(`Request served from cache: ${new Date() - requestStart} ms`);
-            // Return the new cached response
-            return newResponse;
-        } else {
-            console.log('no cached response')
-        }
-    } else {
-        //console.log(`Skipping cache in ${ENVIRONMENT} environment`);
+        return new Response('Missing q param', {
+            status: 405,
+            headers: { 'cache-control': 'public, max-age=2592000' },
+        });
     }
 
     const context = {
@@ -72,26 +61,23 @@ export default async function (request, data, ctx) {
     };
     const items = await data.item.getItemsByName(context, url.searchParams.get('q'), info);
 
-    let response = 'Found no item matching that name';
+    let responseBody = 'Found no item matching that name';
 
     if (items.length > 0) {
         const bestPrice = items[0].sellFor.sort((a, b) => b.price - a.price);
         const itemName = data.item.getLocale(items[0].name, context, info);
-        response = `${itemName} ${new Intl.NumberFormat().format(bestPrice[0].price)} ₽ ${capitalize(bestPrice[0].source)} https://tarkov.dev/item/${items[0].normalizedName}`;
+        responseBody = `${itemName} ${new Intl.NumberFormat().format(bestPrice[0].price)} ₽ ${capitalize(bestPrice[0].source)} https://tarkov.dev/item/${items[0].normalizedName}`;
     }
 
-    let ttl = data.getRequestTtl(requestId);
-    if (ttl < 30) {
-        ttl = 30;
-    }
+    const ttl = data.getRequestTtl(requestId);
     delete data.requests[requestId];
 
     // Update the cache with the results of the query
     // don't update cache if result contained errors
-    if (!skipCache && ttl >= 30) {
-        // using waitUntil doens't hold up returning a response but keeps the worker alive as long as needed
-        ctx.waitUntil(cacheMachine.put(env, 'nightbot', {q: url.searchParams.get('q')}, response, String(ttl)));
+    const response = new Response(responseBody);
+    if (!skipCache && ttl > 0) {
+        response.headers.set('cache-ttl', String(ttl));
     }
 
-    return new Response(response);
+    return response;
 };
diff --git a/datasources/index.mjs b/datasources/index.mjs
index e2279b9c760e3ea25a36989c0f404ab557bfcb17..bcd42790c20c09ed616fa62f158ee59bae3dfe4b 100644
--- a/datasources/index.mjs
+++ b/datasources/index.mjs
@@ -164,6 +164,7 @@ class DataSource {
         if (ttl <= 0) {
             ttl = 0;
         }
+        ttl = Math.max(ttl, 60);
         return ttl;
     }
 }
diff --git a/index.mjs b/index.mjs
index 7223cef2a5ade15e1f30c6bf2c7752dc153020c2..db1869e5f37b81e453ba99d32605b753650e33b1 100644
--- a/index.mjs
+++ b/index.mjs
@@ -10,7 +10,6 @@ import typeDefs from './schema.mjs';
 import dynamicTypeDefs from './schema_dynamic.mjs';
 import resolvers from './resolvers/index.mjs';
 import graphqlUtil from './utils/graphql-util.mjs';
-import cacheMachine from './utils/cache-machine.mjs';
 
 import nightbot from './custom-endpoints/nightbot.mjs';
 import twitch from './custom-endpoints/twitch.mjs';
@@ -81,38 +80,38 @@ async function getSchema(data, context) {
     });
 }
 
-async function graphqlHandler(request, env, ctx, graphQLOptions) {
+async function graphqlHandler(request, env, requestBody) {
     const url = new URL(request.url);
     let query = false;
     let variables = false;
-    const requestStart = new Date();
 
     if (request.method === 'POST') {
         try {
-            const requestBody = await request.json();
+            if (!requestBody) {
+                requestBody = await request.json();              
+            }
+            if (typeof requestBody === 'string') {
+                requestBody = JSON.parse(requestBody);
+            }
             query = requestBody.query;
             variables = requestBody.variables;
         } catch (jsonError) {
             console.error(jsonError);
 
             return new Response(null, {
-                status: 503,
+                status: 400,
             });
         }
     } else if (request.method === 'GET') {
         query = url.searchParams.get('query');
         variables = url.searchParams.get('variables');
-    } else {
-        return new Response(null, {
-            status: 501,
-            headers: { 'cache-control': 'public, max-age=2592000' }
-        });
-    }
+    } 
+
     // Check for empty /graphql query
-    if (!query || query.trim() === "") {
+    if (!query || query.trim() === '') {
         return new Response('GraphQL requires a query in the body of the request',
             {
-                status: 200,
+                status: 400,
                 headers: { 'cache-control': 'public, max-age=2592000' }
             }
         );
@@ -134,27 +133,6 @@ async function graphqlHandler(request, env, ctx, graphQLOptions) {
         console.log('NewRelic health check');
         //return new Response(JSON.stringify({}), responseOptions);
     }
-    let specialCache = '';
-    const contentType = request.headers.get('content-type');
-    if (!contentType || !contentType.startsWith('application/json')) {
-        specialCache = 'application/json';
-    }
-
-    // Check the cache service for data first - If cached data exists, return it
-    if (!skipCache) {
-        const cachedResponse = await cacheMachine.get(env, query, variables, specialCache);
-        if (cachedResponse) {
-            // Construct a new response with the cached data
-            const newResponse = new Response(cachedResponse, responseOptions);
-            // Add a custom 'X-CACHE: HIT' header so we know the request hit the cache
-            newResponse.headers.append('X-CACHE', 'HIT');
-            console.log(`Request served from cache: ${new Date() - requestStart} ms`);
-            // Return the new cached response
-            return newResponse;
-        }
-    } else {
-        //console.log(`Skipping cache in ${ENVIRONMENT} environment`);
-    }
 
     const context = { data: dataAPI, util: graphqlUtil, requestId, lang: {}, warnings: [], errors: [] };
     let result = await graphql({schema: await getSchema(dataAPI, context), source: query, rootValue: {}, contextValue: context, variableValues: variables});
@@ -174,27 +152,18 @@ async function graphqlHandler(request, env, ctx, graphQLOptions) {
 
     let ttl = dataAPI.getRequestTtl(requestId);
 
-    if (specialCache === 'application/json') {
-        if (!result.warnings) {
-            result = Object.assign({warnings: []}, result);
-        }
-        ttl = 30 * 60;
-        result.warnings.push({message: `Your request does not have a "content-type" header set to "application/json". Requests missing this header are limited to resposnes that update every ${ttl/60} minutes.`});
-    }
-
     const body = JSON.stringify(result);
 
-    // Update the cache with the results of the query
+    const response = new Response(body, responseOptions)
+
     // don't update cache if result contained errors
-    if (!skipCache && (!result.errors || result.errors.length === 0) && ttl >= 30) {
-        // using waitUntil doens't hold up returning a response but keeps the worker alive as long as needed
-        ctx.waitUntil(cacheMachine.put(env, query, variables, body, String(ttl), specialCache));
+    if (!skipCache && (!result.errors || result.errors.length === 0) && ttl > 0) {
+        response.headers.set('cache-ttl', String(ttl));
     }
 
-    console.log(`Response time: ${new Date() - requestStart} ms`);
     //console.log(`${requestId} kvs loaded: ${dataAPI.requests[requestId].kvLoaded.join(', ')}`);
     delete dataAPI.requests[requestId];
-    return new Response(body, responseOptions);
+    return response;
 }
 
 const graphQLOptions = {
@@ -203,7 +172,7 @@ const graphQLOptions = {
 
     // Set the path for the GraphQL playground
     // This option can be removed to disable the playground route
-    playgroundEndpoint: '/___graphql',
+    playgroundEndpoint: '/',
 
     // When a request's path isn't matched, forward it to the origin
     forwardUnmatchedRequestsToOrigin: false,
@@ -219,63 +188,96 @@ const graphQLOptions = {
         allowCredentials: 'true',
         allowHeaders: 'Content-type',
         allowOrigin: '*',
-        allowMethods: 'GET, POST, PUT',
+        allowMethods: 'GET, POST',
     },
-
-    // Enable KV caching for external REST data source requests
-    // Note that you'll need to add a KV namespace called
-    // WORKERS_GRAPHQL_CACHE in your wrangler.toml file for this to
-    // work! See the project README for more information.
-    kvCache: false,
 };
 
+async function sha256(message) {
+    // encode as UTF-8
+    const msgBuffer = new TextEncoder().encode(message);
+    // hash the message
+    const hashBuffer = await crypto.subtle.digest('SHA-256', msgBuffer);
+    // convert bytes to hex string
+    return [...new Uint8Array(hashBuffer)]
+      .map((b) => b.toString(16).padStart(2, '0'))
+      .join('');
+}
+
 export default {
 	async fetch(request, env, ctx) {
+        if (!['GET', 'POST'].includes(request.method.toUpperCase())) {
+            return new Response(null, {
+                status: 405,
+                headers: { 'cache-control': 'public, max-age=2592000' },
+            });
+        }
+        const requestStart = new Date();
 		const url = new URL(request.url);
 
+        const cacheUrl = new URL(request.url);
+        let cacheKey = new Request(cacheUrl.toString().toLowerCase(), request);
+        const requestBody = await request.text();
+        if (request.method.toUpperCase() === 'POST') {
+            cacheUrl.pathname = '/posts' + cacheUrl.pathname + await sha256(requestBody);
+            cacheKey = new Request(cacheUrl.toString().toLowerCase(), {
+                headers: request.headers,
+                method: 'GET',
+            });
+        }
+        const cache = env.ENVIRONMENT === 'production' ? caches.default : await caches.open('dev:cache');
+        let response = await cache.match(cacheKey);
+        if (!skipCache && response) {
+            return response;
+        }
+
         try {
             if (url.pathname === '/twitch') {
-                const response = request.method === 'OPTIONS' ? new Response('', { status: 204 }) : await twitch(env);
+                response = await twitch(env);
                 if (graphQLOptions.cors) {
                     setCors(response, graphQLOptions.cors);
                 }
+            }
 
-                return response;
+            if (url.pathname === graphQLOptions.playgroundEndpoint) {
+                return playground(request, graphQLOptions);
+            }
+
+            if (graphQLOptions.forwardUnmatchedRequestsToOrigin) {
+                return fetch(request);
             }
 
             if (!dataAPI) {
                 dataAPI = new DataSource(env);
             }
             
-            if (url.pathname === '/webhook/nightbot') {
-                return nightbot(request, dataAPI, env, ctx);
-            }
-
-            if (url.pathname === '/webhook/stream-elements') {
-                return nightbot(request, dataAPI, env, ctx);
-            }
-
-            if (url.pathname === '/webhook/moobot') {
-                return nightbot(request, dataAPI, env, ctx);
+            if (url.pathname === '/webhook/nightbot' ||
+                url.pathname === '/webhook/stream-elements' ||
+                url.pathname === '/webhook/moobot'
+            ) {
+                response = await nightbot(request, dataAPI);
             }
 
             if (url.pathname === graphQLOptions.baseEndpoint) {
-                const response = request.method === 'OPTIONS' ? new Response('', { status: 204 }) : await graphqlHandler(request, env, ctx, graphQLOptions);
+                response = await graphqlHandler(request, env, requestBody);
                 if (graphQLOptions.cors) {
                     setCors(response, graphQLOptions.cors);
                 }
-
-                return response;
             }
 
-            if (graphQLOptions.playgroundEndpoint && url.pathname === graphQLOptions.playgroundEndpoint) {
-                return playground(request, graphQLOptions);
+            if (!response) {
+                response = new Response('Not found', { status: 404 });
             }
-
-            if (graphQLOptions.forwardUnmatchedRequestsToOrigin) {
-                return fetch(request);
+            if (!skipCache && response.headers.has('cache-ttl')) {
+                const ttl = parseInt(response.headers.get('cache-ttl'));
+                response.headers.delete('cache-ttl');
+                if (ttl > 0) {
+                    response.headers.set('Cache-Control', `s-maxage=${ttl}`);
+                    //response.headers.delete('cache-ttl');
+                    ctx.waitUntil(cache.put(cacheKey, response.clone()));
+                }
             }
-            return new Response('Not found', { status: 404 });
+            console.log(`Response time: ${new Date() - requestStart} ms`);
+			return response;
         } catch (err) {
             return new Response(graphQLOptions.debug ? err : 'Something went wrong', { status: 500 });
         }
diff --git a/kv-cache.js b/kv-cache.js
deleted file mode 100644
index d377b0b0979307444d45bb9bb6dd3bd9539f3ae7..0000000000000000000000000000000000000000
--- a/kv-cache.js
+++ /dev/null
@@ -1,16 +0,0 @@
-class KVCache {
-    get(key) {
-        return WORKERS_GRAPHQL_CACHE.get(key)
-    }
-
-    set(key, value, options) {
-        const opts = {}
-        const ttl = options && options.ttl
-        if (ttl) {
-            opts.expirationTtl = ttl
-        }
-        return WORKERS_GRAPHQL_CACHE.put(key, value, opts)
-    }
-};
-
-module.exports = KVCache;
diff --git a/dist/index.js b/dist/index.js
index f958af88a86331b6ef225563a9d1433c200f5d69..562330dd38b9daaeb9bec6daa5d30823337317f8 100644
GIT binary patch
delta 1755
zcmb7E&u<$=6qcK&P*a{NXd#iJ@(QH8F7~>psz^(%P^c<3CAO0|<!Ep1S$oTR$J&`q
zYEsKcthiL%5OYC7oDoPMQ2SRPRs1;gR*3^A_ya(KH?v;X5$yqAyqbC6d*A!s_vXv5
z&p-I#{D(;{IgrdH2b1~aQ1VprbaFV!C(k5Dl4rk%kJc7q=?5?8ciafsEy<$L4VwC>
zsUDuoEzGT)eM8+?gHO~SYw*n>R}8~8s?V>%$#R>ALK23xFPYN{+GmRUQ#gZ&_kH1e
z!-B1TszNcBzkBZ*+{=xTerbZPFKYwoQ!=d3QN)}slUKt*ENzSKnmoO<3i*AQ%f9Db
z@dNgFP={`t9$gd6;B<SGO{4Sy)i0Ovs;AGI(_r)k65}1e!#YKbnA<_wW2p0>8+PbK
z#!+a_G{z+MJ+#dSX88@Pla&fu7T&)7_`4+x;~;p#wYpM;W!}>D{jjUkqArIXiD}4O
zz*qMs&FEsIR;taE0ckQj3Qsg0olM7W(fkVb47i9^EWH&=-LK@1t9Tt&)pzSqI*d5!
zO#QYF1$Cwhi}^>KRj~@Mshux!pxi3FtG=qj3H9sW2Vq<)g}gLyyNv7<ia26|^m3&U
zO?T4f{l3<+!|5jE5@SK)Vv4W>|9yr56QY2UQ`ce;xWoN|XTI4JvcqFpMEYk@G@_>6
zU3Y~_Of8uW2C=0}&rmaZ8WAVn8>yo;SXO6iuykTFvWat2A<`lR+{>#wH8`zasl#*X
z&c!1yj3-)B`IL}Bk5bo>#{%9p{3VxefNr11p+ru@q+tkb_uR0{I_Rgairif@YLkP&
zGy;!DD0rV~I|?4+kjL0_cbG{U_;So5$}41~tzwzJN+sfC>6{cCnM#i1WI5@Ru;lbz
zpBxym0gs4K$goelmwG*8MS}}<T`Ds~n~0bYA~hw^=VJm<JF>@VjwubXuk`HR8WFS&
z#XFP6E7{gKG-{t#ex`$h6R@x=dsxEP4SVxC_@T$`Rw^fnSe{YQ&h#tj4f#(oy(f9K
zUWe<J$<$#t;;!A&AZ-s_d1kY8w7OrXS^raq6}7qv3(s4{jBeT$jal_K;4Ss-23$~o
zZoqN%a|4d4rA>HABg!h;gu?2?B2$ch$Y{E2Tea$=ai_1LX}^N~n<86MV(~j=8vkD}
z-PCT;>7FRvta8(6Bb|mh#-WoDj9PPAyBD|Mz2#Z$H0<(3x9mHW`L8-D@=F~~eb#`}
zb6Ti#4Y;H}Xu!pz`eo74byxPxO8wY?Hz{sWo!W*4_4YRD{qd*sFmLE9ck#e6b$1(X
N&C`PWQaRT_{0oBdIo<#O

delta 616
zcmYk2K}-`-5QbBPBFi#RsahM92hq5zr6pcWqgA6OCI#)XK)dzSm2S%#XwB|6*qDtH
z-o+D968|&tXgH}chQzCh7mpfmUiD-==+S+<HQ`;}n>YW=|IK`Ro8R5bKjAUn#}Dy-
zKEUIAkRRqlT;juA<|A)ttB5Z}TEopb+QXkYntIorr`NHVgr6n4fmw~t57-T+NT_S1
z;^G30z`sp{c&Sn1K=?_7l@cZKTchhDF(LVq#Db&DW^iksG6^LN8LKsIkJar)11X)(
z;HpmPQ<+{)u^gxEWSHyK+Z`{wgCBgCW8>I;A0NkKou)@aQFh&OU9)NVHH>Y_6Fd9A
zhIStO?U#enAg{7VK}&4tbQ$SQ`3OEdmnC$UNXN$|ViXzpH8nKGC4<f(wH$~|gOUly
z+?WxBXaAGn*|vNXTSBnEOjnMJ!Ngtyp=Nrkkz3$5S*0|l%QPAG!Gd_Lm1!m(`GsvR
z<Z`UISh^GLpf@*TEA5sWt%ViX`h8c4Dtdfh%ap^@3RM*0ywY~8Y~8xoX)2;o*7Y2_
z)wCO3ML?^nSUipeoG2Ki2$U?aEsx@bK?Qs^=o*Fv=v0;RB6|{Ul~MxqG+v395T_l>
Z>o~20lzvF7N-$6KCGn$553zceoPVm!yuttg

diff --git a/dist/index.js.map b/dist/index.js.map
index ae7ee61052d85e707cfbe80c6c3e4b2efdc09f65..0b2fd2b0d2039d0fb18cecf2e771cf664e03d796 100644
GIT binary patch
delta 1801
zcmb7EO>7%g5SD42AJgJjif}5Z7*Nt(i`XTFAc$p&CI#99qN1wAAt+w#xAww%pSAlo
zu5m4MLqb8Qir^h+<@`G0fP?@kS2$OyxN_)$8yBQ-;a1AbTYKdc4iIVLr#Jh}eDlrB
z+xU6u%U_m0{vmPyzWV0R#O(Kn(|;wBg~Em9g^io@@X4JA3A9Jhj-idACDF#wCeS9)
zrqEJokD?t%JAwAt!JP-`FK)fq@I~DT9J|#48;@Xw(s7Ly&#5<rFQMJ^9m(HtTz<9X
zmFK|cRz>k!>~7Ku@Isxx&1TdKpB@`O!>{x51-gSG#6eBE&8~O{S8lVP5?#Q*vhV^4
zRY$(vkPe>l^Rn=HzRKlguMtYqK;No}oCac#fG#?=O>F)hRYC8njc&q4$TiESWQ1Gk
z4(`sKgUdGEuEqdx0%E=9RCpz-5@d}7#RAK#VBIqGJ$*-*D7IsR8J%F5Lvwq!SOmj>
z8#f+u&c<FZblrdYBe(j!$BfkyDeZVw3JjDoY7Y@wgqilBBtmpb1Ce49C=Q{?NnJBX
zKAxin+piev*M+f+%JkT4>RONG)&BexQ=j*+nb$U1TK(8#r{hyf9ro~UwvkG!)Fyk2
z9M7ogr770U<vfvVSXJ%=_kz&p0ZL>^trHP1i+Y{ps|fUXLP8jzo)95S*ZGix%Yz^b
zQecrm!?juuX*?X5b|5PvlyiW;-1j?Jqt#rrFh@LiaW4Q$lzfDo7Er4;n7WSI*kot3
z0PVVUeJQkU?k_@oyy|?!JHzJbQBw6Sc1Eplu?5vWn>?K!NQx{pFLlyRo$9)xs@Y2+
zEf=i12t5e`JBN)3pj@-ODzAVOjgfCPbzh@2IFdL`w(ubkbx!RIga<7VLd{y^I;x9{
z=wsYK`ZO1Yt|^y8CI-c9iEilYRQY^94vJ?4<8U_}oH(EBr4}BCI__LF-a}s4IFAxz
zo)(zMM1O*;Vix)W>yb5qZH#yXQEp1z#WIiVtJZ<0FjyYcUL5X89((QJu8$Ov&AZ&I
z${OTgKH{(61;?|6S&Ae*Dx^7-FiRUD#gnM|Xg0kVE1vpxmp!2lx7f0&16KI^Vbv@V
zn5KjnjBJz!DY3_%S2wrWtLpAHdun3PZFRCRc}k^r*rK|$!wQV{AH!U+WGxGA%=8tx
z5HYR(*uj4%c3I{q_Vrzso{3&ST{%9LmLKppqX%lZs3@Z9?y~tVPR0M4sSjvqDDZ#N
zFaBH$NVvRKc+iN>IK3>9fbSZk+7a;LK)2y}sP<>ute}EDW~lG__=p_rvB%YPVe+`T
zw}+0W`>d$m>$8m7+QF`@_t|sw-Ffv}9}(*72{uMN)aFa6jCyCEttYJ}F1fn5&tCo;
DV9<me

delta 605
zcmX|8OK1~O6eVAc=5uQsTKkDl1WjTL6_uc%#n=bpLMz?42$-~)iGe!7$pkGXAj(_m
zLXdhEwqoKiohI&7Du`QGV%=t8L2%_x+(;ql%*6OM?{V(E=bU@q({A?3m+ZYau3m5R
zPtUdCT48Q4X1}`*3hox%Be+*^pWuGMcL}~*@POcZ1m7!oQ1Fo8VZkGBIjyW>XO%*T
zuF*$)Tcbmp$DY%Bmpi9GZ_+G&G%4jT%PejItVKy^EgB6dwWTFiuUnYXq7<f@6vgWn
zUBK@aO&w_Dl$^q>Bi)e}twH<ASiV%&Sg|b2*nUZe;n!(=GBqg1B~`7cDOS~rm73<<
z_<ABT8g%dkyK6Tht5Y)KAnBV@wOS}ijXZ93!!hK1o-i^x4dbFt8PvPsVZ^q5L0mOx
z9xn`Hkv?@JpXh7ilR-!E%b>GhCQSy848$=F&lncgt-`Z)ni;db+X1MB+j9l&#y>BX
zn@ESo;Wdfb1Sc_P(uBV+(x<p@(mp&kDHiIZ1L1cj9fz_(*OE5%VnvnGMQNc{ieH+)
zayebq)Ur}4%gb>)tAsV=tp3xW8GJS<VT+C6dYdMYfoBL0+H?*d+H@W}Ha66uGyhux
pD0XN+mOIv_PV>X9P+&xs2dP^hWm~W`Fn!t^#a4$Nq40`M{RO5U(To59

diff --git a/utils/cache-machine.mjs b/utils/cache-machine.mjs
deleted file mode 100644
index f322b64ebc58a3e253c31f0d64194bfe23655a7d..0000000000000000000000000000000000000000
--- a/utils/cache-machine.mjs
+++ /dev/null
@@ -1,138 +0,0 @@
-// cache url
-const cacheUrl = 'https://cache.tarkov.dev'
-
-let cacheFailCount = 0;
-let cachePaused = false;
-
-function pauseCache() {
-    cacheFailCount++;
-    if (cacheFailCount <= 2) {
-        return;
-    }
-    cachePaused = true;
-    setTimeout(() => {
-        cachePaused = false;
-        cacheFailCount = 0;
-    }, 60000);
-}
-
-async function fetchWithTimeout(resource, options = {}) {
-    const { timeout = 1000 } = options;
-    return fetch(resource, {
-        ...options,
-        signal: AbortSignal.timeout(timeout),
-    });
-}
-
-// Helper function to create a hash from a string
-// :param string: string to hash
-// :return: SHA-256 hash of string
-async function hash(string) {
-    const utf8 = new TextEncoder().encode(string);
-    const hashBuffer = await crypto.subtle.digest('SHA-256', utf8);
-    const hashArray = Array.from(new Uint8Array(hashBuffer));
-    const hashHex = hashArray
-        .map((bytes) => bytes.toString(16).padStart(2, '0'))
-        .join('');
-
-    return hashHex;
-}
-
-// Updates the cache with the results of a query
-// :param json: the incoming request in json
-// :param body: the body to cache
-// :return: true if successful, false if not
-async function updateCache(env, query, variables, body, ttl = '', specialCache = '') {
-    try {
-        if (!env.CACHE_BASIC_AUTH) {
-            console.warn('env.CACHE_BASIC_AUTH is not set; skipping cache check');
-            return false;
-        }
-        if (cachePaused) {
-            console.warn('Cache paused; skipping cache update');
-            return false;
-        }
-        // Get the cacheKey from the request
-        query = query.trim();
-        console.log(`caching response for ${env.ENVIRONMENT} environment`);
-        const cacheKey = await hash(env.ENVIRONMENT + query + JSON.stringify(variables) + specialCache);
-
-        // headers and POST body
-        const headersPost = {
-            body: JSON.stringify({ key: cacheKey, value: body, ttl }),
-            method: 'POST',
-            headers: {
-                'content-type': 'application/json;charset=UTF-8',
-                'Authorization': `Basic ${env.CACHE_BASIC_AUTH}`
-            },
-            timeout: 10000,
-        };
-
-        // Update the cache
-        const response = await fetchWithTimeout(`${cacheUrl}/api/cache`, headersPost);
-
-        // Log non-200 responses
-        if (response.status !== 200) {
-            console.error(`failed to write to cache: ${response.status}`);
-            return false
-        }
-        cacheFailCount = 0;
-        return true
-    } catch (error) {
-        if (error.message === 'The operation was aborted due to timeout') {
-            console.warn('Updating cache timed out');
-            pauseCache();
-            return false;
-        }
-        console.error('updateCache error: ' + error.message);
-        return false;
-    }
-}
-
-// Checks the caching service to see if a request has been cached
-// :param json: the json payload of the incoming worker request
-// :return: json results of the item found in the cache or false if not found
-async function checkCache(env, query, variables, specialCache = '') {
-    try {
-        if (!env.CACHE_BASIC_AUTH) {
-            console.warn('env.CACHE_BASIC_AUTH is not set; skipping cache check');
-            return false;
-        }
-        if (cachePaused) {
-            console.warn('Cache paused; skipping cache check');
-            return false;
-        }
-        query = query.trim();
-        const cacheKey = await hash(env.ENVIRONMENT + query + JSON.stringify(variables) + specialCache);
-        if (!cacheKey) {
-            console.warn('Skipping cache check; key is empty');
-            return false;
-        }
-
-        const response = await fetchWithTimeout(`${cacheUrl}/api/cache?key=${cacheKey}`, { 
-            headers: {
-                'content-type': 'application/json;charset=UTF-8',
-                'Authorization': `Basic ${env.CACHE_BASIC_AUTH}`
-            }, 
-        });
-        cacheFailCount = 0;
-        if (response.status === 200) {
-            return await response.json();
-        }
-
-        return false
-    } catch (error) {
-        if (error.message === 'The operation was aborted due to timeout') {
-            console.warn('Checking cache timed out');
-            pauseCache();
-            return false;
-        }
-        console.error('checkCache error: ' + error.message);
-        return false;
-    }
-}
-
-export default {
-    get: checkCache,
-    put: updateCache
-};
